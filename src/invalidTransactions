**
 * @param {string[]} transactions
 * @return {string[]}
 */
var invalidTransactions = function(transactions) {
    const included = new Set();
    const invalid = [];
    const convertedTransactions = [];

    for (let i = 0; i < transactions.length; i++) {
        const transaction = transactions[i];
        convertedTransactions[i] = transaction.split(',');
        
        if (convertedTransactions[i][2] > 1000) {
            invalid.push(transaction);
            included.add(transaction);
        }
    }

    for (let i = 0; i < convertedTransactions.length; i++) {
        const [name1, time1, amount1, city1] = convertedTransactions[i];
        const key = `${name1},${time1},${amount1},${city1}`;

        if (included.has(key)) continue;
        
        for (let j = 0; j < convertedTransactions.length; j++) {
            if (i === j) continue;

            const [name2, time2, amount2, city2] = convertedTransactions[j];

            if (name1 === name2 && city1 !== city2 && Math.abs(time2 - time1) <= 60) {
                invalid.push(key);
                break;
            }
        }
    }

    return invalid;
};
